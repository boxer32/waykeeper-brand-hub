'use client'

import { useState, useRef } from 'react'
import { Upload, FileText, CheckCircle, AlertTriangle, XCircle, Download, RefreshCw } from 'lucide-react'
import { showToast } from '@/lib/utils'
// import type { BrandImageReport } from '@/types/brand-image-report'

const complianceChecks = [
  {
    category: 'Logo Usage',
    checks: [
      { rule: 'Logo placement correct', ruleThai: '‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ß‡∏≤‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', weight: 'high' },
      { rule: 'Logo size minimum 40px height', ruleThai: '‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÉ‡∏´‡∏ç‡πà‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 40px', weight: 'medium' },
      { rule: 'Clear space around logo maintained', ruleThai: '‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á‡∏£‡∏≠‡∏ö‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠', weight: 'high' },
      { rule: 'No distortion or stretching', ruleThai: '‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÑ‡∏°‡πà‡∏ö‡∏¥‡∏î‡πÄ‡∏ö‡∏µ‡πâ‡∏¢‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏∑‡∏î', weight: 'high' }
    ]
  },
  {
    category: 'Colors',
    checks: [
      { rule: 'Colors match brand palette', ruleThai: '‡∏™‡∏µ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏µ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå', weight: 'high' },
      { rule: 'Proper color contrast ratios', ruleThai: '‡∏™‡∏µ‡∏°‡∏µ‡∏Ñ‡∏≠‡∏ô‡∏ó‡∏£‡∏≤‡∏™‡∏ï‡πå‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠', weight: 'high' },
      { rule: 'No unauthorized color usage', ruleThai: '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï', weight: 'medium' },
      { rule: 'Color hierarchy maintained', ruleThai: '‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏Ç‡∏≠‡∏á‡∏™‡∏µ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', weight: 'medium' }
    ]
  },
  {
    category: 'Typography',
    checks: [
      { rule: 'Inter font family used', ruleThai: '‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå Inter', weight: 'high' },
      { rule: 'Typography hierarchy correct', ruleThai: '‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', weight: 'medium' },
      { rule: 'Minimum 16px body text', ruleThai: '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 16px', weight: 'high' },
      { rule: 'No prohibited fonts', ruleThai: '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≤‡∏°', weight: 'high' }
    ]
  },
  {
    category: 'Voice & Tone',
    checks: [
      { rule: 'Tone matches brand guidelines', ruleThai: '‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå', weight: 'medium' },
      { rule: 'No corporate speak', ruleThai: '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ', weight: 'medium' },
      { rule: 'Friendly, local voice', ruleThai: '‡∏ô‡πâ‡∏≥‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏ï‡∏£ ‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î', weight: 'medium' },
      { rule: 'No prohibited words', ruleThai: '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≤‡∏°', weight: 'low' }
    ]
  },
  {
    category: 'Accessibility',
    checks: [
      { rule: 'WCAG AA compliance', ruleThai: '‡∏Ñ‡∏ô‡∏û‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ', weight: 'high' },
      { rule: 'Text contrast sufficient', ruleThai: '‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏û‡∏≠', weight: 'high' },
      { rule: 'Alt text for images', ruleThai: '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢', weight: 'medium' },
      { rule: 'Keyboard navigation', ruleThai: '‡πÉ‡∏ä‡πâ‡∏Ñ‡∏µ‡∏¢‡πå‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÑ‡∏î‡πâ', weight: 'medium' }
    ]
  },
  {
    category: 'File Quality',
    checks: [
      { rule: 'High resolution images', ruleThai: '‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏π‡∏á', weight: 'medium' },
      { rule: 'Correct file format', ruleThai: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', weight: 'low' },
      { rule: 'Optimized file size', ruleThai: '‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°', weight: 'low' },
      { rule: 'No pixelation', ruleThai: '‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡πÅ‡∏ï‡∏Å', weight: 'medium' }
    ]
  }
]

const designTypes = [
  { value: 'banner', label: '‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå', description: '‡πÅ‡∏ö‡∏ô‡πÄ‡∏ô‡∏≠‡∏£‡πå‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå, ‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤' },
  { value: 'social-post', label: '‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•', description: 'Facebook, Instagram, Twitter' },
  { value: 'instagram-story', label: '‡∏™‡∏ï‡∏≠‡∏£‡∏µ‡πà‡∏≠‡∏¥‡∏ô‡∏™‡∏ï‡∏≤‡πÅ‡∏Å‡∏£‡∏°', description: 'Instagram Story, Reels' },
  { value: 'print-ad', label: '‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå', description: '‡πÇ‡∏Ü‡∏©‡∏ì‡∏≤‡πÉ‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå, ‡∏ô‡∏¥‡∏ï‡∏¢‡∏™‡∏≤‡∏£' },
  { value: 'business-card', label: '‡∏ô‡∏≤‡∏°‡∏ö‡∏±‡∏ï‡∏£', description: '‡∏ô‡∏≤‡∏°‡∏ö‡∏±‡∏ï‡∏£, ‡∏Å‡∏≤‡∏£‡πå‡∏î‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠' },
  { value: 'brochure', label: '‡πÇ‡∏ö‡∏£‡∏ä‡∏±‡∏ß‡∏£‡πå', description: '‡πÇ‡∏ö‡∏£‡∏ä‡∏±‡∏ß‡∏£‡πå, ‡πÅ‡∏ú‡πà‡∏ô‡∏û‡∏±‡∏ö' },
  { value: 'presentation', label: '‡∏á‡∏≤‡∏ô‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠', description: 'PowerPoint, Keynote' },
  { value: 'website', label: '‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå', description: '‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö, Landing Page' },
  { value: 'email', label: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•', description: 'Email Marketing, Newsletter' },
  { value: 'other', label: '‡∏≠‡∏∑‡πà‡∏ô‡πÜ', description: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∑‡πà‡∏ô‡πÜ' }
]

export default function BrandComplianceChecker() {
  const [uploadedFile, setUploadedFile] = useState<File | null>(null)
  const [selectedDesignType, setSelectedDesignType] = useState('banner')
  const [report, setReport] = useState<any | null>(null)
  const [isChecking, setIsChecking] = useState(false)
  const [imagePreview, setImagePreview] = useState<string | null>(null)
  const [imageMetadata, setImageMetadata] = useState<any>(null)
  const fileInputRef = useRef<HTMLInputElement>(null)

  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (file) {
      // Reset all states when uploading new file
      setUploadedFile(file)
      setImagePreview(null)
      setImageMetadata(null)
      setReport(null)
      setIsChecking(false)
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á preview ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      const reader = new FileReader()
      reader.onload = (e) => {
        setImagePreview(e.target?.result as string)
      }
      reader.readAsDataURL(file)
      
      // ‡∏≠‡πà‡∏≤‡∏ô metadata ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
      const basicMetadata = {
        name: file.name,
        size: file.size,
        type: file.type,
        lastModified: new Date(file.lastModified).toLocaleString('th-TH')
      }
      
      // ‡∏≠‡πà‡∏≤‡∏ô metadata ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
      try {
        const imageMetadata = await readImageMetadata(file)
        setImageMetadata({
          ...basicMetadata,
          ...(imageMetadata as any)
        })
      } catch (error) {
        console.warn('Failed to read image metadata:', error)
        setImageMetadata(basicMetadata)
      }
      
      // Reset file input to allow same file upload again
      if (fileInputRef.current) {
        fileInputRef.current.value = ''
      }
      
      console.log('üìÅ File uploaded:', basicMetadata)
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  const getTimeAgo = (lastModified: string) => {
    const now = new Date()
    const modified = new Date(lastModified)
    const diffInMs = now.getTime() - modified.getTime()
    const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24))
    const diffInWeeks = Math.floor(diffInDays / 7)
    const diffInMonths = Math.floor(diffInDays / 30)
    const diffInYears = Math.floor(diffInDays / 365)
    
    if (diffInYears > 0) {
      return `${diffInYears} ‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`
    } else if (diffInMonths > 0) {
      return `${diffInMonths} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`
    } else if (diffInWeeks > 0) {
      return `${diffInWeeks} ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`
    } else if (diffInDays > 0) {
      return `${diffInDays} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`
    } else {
      return '‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ'
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô metadata ‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  const readImageMetadata = async (file: File) => {
    return new Promise((resolve, reject) => {
      const img = new Image()
      const canvas = document.createElement('canvas')
      const ctx = canvas.getContext('2d')
      
      img.onload = () => {
        try {
          // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û
          const width = img.naturalWidth
          const height = img.naturalHeight
          
          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì DPI (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå)
          const estimatedDpi = Math.round(Math.sqrt((file.size * 8) / (width * height * 3)) * 25.4)
          
          // ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å Canvas
          canvas.width = width
          canvas.height = height
          ctx?.drawImage(img, 0, 0)
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Color Space
          const colorSpace = ctx?.getContextAttributes()?.colorSpace || 'srgb'
          
          resolve({
            width,
            height,
            dpi: estimatedDpi,
            colorSpace,
            aspectRatio: (width / height).toFixed(2),
            megapixels: ((width * height) / 1000000).toFixed(1)
          })
        } catch (error) {
          reject(error)
        }
      }
      
      img.onerror = () => reject(new Error('Failed to load image'))
      img.src = URL.createObjectURL(file)
    })
  }


  const runComplianceCheck = async () => {
    if (!uploadedFile) {
      showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô')
      return
    }
    
    const selectedType = designTypes.find(t => t.value === selectedDesignType)
    console.log(`üîç Checking ${selectedType?.label} compliance for file:`, uploadedFile.name)
    console.log('üìÅ File details:', {
      name: uploadedFile.name,
      size: uploadedFile.size,
      type: uploadedFile.type
    })
    
    setIsChecking(true)
    setReport(null)
    
    try {
      const formData = new FormData()
      formData.append('file', uploadedFile)
      
      // ‡∏™‡πà‡∏á metadata ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
      if (imageMetadata) {
        formData.append('metadata', JSON.stringify({
          width: imageMetadata.width,
          height: imageMetadata.height,
          dpi: imageMetadata.dpi,
          aspectRatio: imageMetadata.aspectRatio,
          megapixels: imageMetadata.megapixels,
          colorSpace: imageMetadata.colorSpace
        }))
      }
      
      console.log('üöÄ Sending request to API...', { metadata: imageMetadata })
      
      const response = await fetch('/api/check/design-image', {
        method: 'POST',
        body: formData,
      })
      
      console.log('üì° Response status:', response.status)
      
      if (!response.ok) {
        const errorText = await response.text()
        console.error('‚ùå API Error Response:', errorText)
        let errorData
        try {
          errorData = JSON.parse(errorText)
        } catch {
          errorData = { error: errorText }
        }
        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`)
      }
      
      const reportData = await response.json()
      console.log('‚úÖ Report received:', reportData)
      setReport(reportData)
      showToast('‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!')
    } catch (error) {
      console.error('‚ùå Compliance check error:', error)
      showToast(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error instanceof Error ? error.message : 'Unknown error'}`)
    } finally {
    setIsChecking(false)
    }
  }

  const getStatusIcon = (pass: boolean | null) => {
    if (pass === true) {
        return <CheckCircle className="w-5 h-5 text-earth-green" />
    } else if (pass === false) {
      return <XCircle className="w-5 h-5 text-heart-rose" />
    } else {
        return <AlertTriangle className="w-5 h-5 text-morning-gold" />
    }
  }

  const getStatusColor = (pass: boolean | null) => {
    if (pass === true) {
        return 'text-earth-green bg-earth-green/10'
    } else if (pass === false) {
      return 'text-heart-rose bg-heart-rose/10'
    } else {
        return 'text-morning-gold bg-morning-gold/10'
    }
  }

  const getStatusLabel = (pass: boolean | null) => {
    if (pass === true) {
      return '‡∏ú‡πà‡∏≤‡∏ô'
    } else if (pass === false) {
      return '‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô'
    } else {
      return '‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à'
    }
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å report
  const overallScore = report?.score?.overall || 0
  const allItems = report?.sections?.flatMap((s: any) => s.items) || []
  const passedCount = allItems.filter((item: any) => item.pass === true).length
  const failedCount = allItems.filter((item: any) => item.pass === false).length
  const warningCount = allItems.filter((item: any) => item.pass === null).length

  return (
    <section id="compliance" className="py-16 bg-gradient-to-br from-mist-grey to-white">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="text-center mb-12">
          <h2 className="text-4xl font-bold text-deep-earth mb-4">
            Brand Compliance Checker
          </h2>
          <p className="text-lg text-deep-earth/70 max-w-2xl mx-auto mb-4">
            Upload your design or paste text to check brand compliance automatically
          </p>
          <p className="text-base text-deep-earth/60 max-w-3xl mx-auto">
            ‚úÖ ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á Waykeeper ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏π‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô 
            ‡πÄ‡∏£‡∏≤‡πÄ‡∏≠‡∏≤‡∏£‡∏π‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à ‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏∞‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏é‡∏Ç‡∏≠‡∏á Waykeeper ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà 
            ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏î‡∏π‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          </p>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Input Section */}
          <div className="space-y-6">
            {/* Design Type Selection */}
            <div className="card">
              <h3 className="text-lg font-semibold text-deep-earth mb-4">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö</h3>
              <div className="space-y-3">
                <label className="block text-sm font-medium text-deep-earth">
                  ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:
                </label>
                <select
                  value={selectedDesignType}
                  onChange={(e) => setSelectedDesignType(e.target.value)}
                  className="w-full p-3 border border-mist-grey rounded-lg focus:ring-2 focus:ring-skypath-blue focus:border-transparent"
                >
                  {designTypes.map((type) => (
                    <option key={type.value} value={type.value}>
                      {type.label} - {type.description}
                    </option>
                  ))}
                </select>
                <p className="text-sm text-deep-earth/60">
                  ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏¢‡∏¥‡πà‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
                </p>
              </div>
            </div>

            {/* File Upload */}
            <div className="card">
              <div className="flex items-center justify-between mb-4">
                <h3 className="text-lg font-semibold text-deep-earth">‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û</h3>
                {uploadedFile && (
                  <button
                    onClick={() => {
                      setUploadedFile(null)
                      setImagePreview(null)
                      setImageMetadata(null)
                      setReport(null)
                      if (fileInputRef.current) {
                        fileInputRef.current.value = ''
                      }
                    }}
                    className="text-sm text-heart-rose hover:text-heart-rose/80 flex items-center gap-1"
                  >
                    <XCircle className="w-4 h-4" />
                    ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                  </button>
                )}
              </div>
              <div
                className="border-2 border-dashed border-mist-grey rounded-lg p-8 text-center hover:border-skypath-blue transition-colors cursor-pointer"
                onClick={() => fileInputRef.current?.click()}
                onDragOver={(e) => {
                  e.preventDefault()
                  e.currentTarget.classList.add('border-skypath-blue', 'bg-skypath-blue/5')
                }}
                onDragLeave={(e) => {
                  e.preventDefault()
                  e.currentTarget.classList.remove('border-skypath-blue', 'bg-skypath-blue/5')
                }}
                onDrop={(e) => {
                  e.preventDefault()
                  e.currentTarget.classList.remove('border-skypath-blue', 'bg-skypath-blue/5')
                  const files = e.dataTransfer.files
                  if (files.length > 0) {
                    const file = files[0]
                    if (file.type.startsWith('image/') || file.name.match(/\.(png|jpg|jpeg|pdf|ai|psd)$/i)) {
                      // ‡∏™‡∏£‡πâ‡∏≤‡∏á synthetic event
                      const syntheticEvent = {
                        target: { files: [file] }
                      } as unknown as React.ChangeEvent<HTMLInputElement>
                      handleFileUpload(syntheticEvent)
                    } else {
                      showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô')
                    }
                  }
                }}
              >
                <Upload className="w-12 h-12 text-deep-earth/40 mx-auto mb-4" />
                <p className="text-deep-earth/70 mb-2">
                  ‡∏•‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏ß‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå
                </p>
                <p className="text-sm text-deep-earth/50">
                  ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå PNG, JPG, PDF, AI, PSD
                </p>
                <input
                  ref={fileInputRef}
                  type="file"
                  accept=".png,.jpg,.jpeg,.pdf,.ai,.psd"
                  onChange={handleFileUpload}
                  className="hidden"
                />
              </div>
              {uploadedFile && (
                <div className="mt-4 p-3 bg-skypath-blue/10 rounded-lg">
                  <p className="text-sm text-skypath-blue font-medium">
                    ‚úì ‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
                  </p>
                  <p className="text-xs text-deep-earth/60 mt-1">
                    ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤
                  </p>
                </div>
              )}
            </div>


            {/* Check Button */}
            <button
              onClick={runComplianceCheck}
              disabled={isChecking || !uploadedFile}
              className="w-full btn-primary disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center gap-2"
            >
              {isChecking ? (
                <>
                  <RefreshCw className="w-4 h-4 animate-spin" />
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö{designTypes.find(t => t.value === selectedDesignType)?.label}...
                </>
              ) : (
                <>
                  <CheckCircle className="w-4 h-4" />
                  ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö{designTypes.find(t => t.value === selectedDesignType)?.label}
                </>
              )}
            </button>
          </div>

          {/* Results Section */}
          <div className="space-y-6">
            {report && (
              <>
                {/* Image Info & Metadata */}
                {report.input && (
                  <div className="card bg-white">
                    <h3 className="text-lg font-semibold text-deep-earth mb-4">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</h3>
                    
                    {/* Image Preview in Results */}
                    {imagePreview && (
                      <div className="mb-4">
                        <h4 className="font-medium text-deep-earth mb-2">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö:</h4>
                        <div className="border border-mist-grey rounded-lg overflow-hidden">
                          <img 
                            src={imagePreview} 
                            alt="Image being analyzed" 
                            className="w-full h-64 object-contain bg-mist-grey/20"
                          />
                        </div>
                      </div>
                    )}
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      {/* Basic Info */}
                      <div className="space-y-2">
                        <h4 className="font-medium text-deep-earth">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô:</h4>
                        <div className="text-sm text-deep-earth/70 space-y-1">
                          <div><span className="font-medium">‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå:</span> {report.input.fileName}</div>
                          <div><span className="font-medium">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</span> {report.input.mime}</div>
                          <div><span className="font-medium">‡∏Ç‡∏ô‡∏≤‡∏î:</span> {report.input.sizeBytes ? Math.round(report.input.sizeBytes / 1024) + ' KB' : '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}</div>
                          <div><span className="font-medium">‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û:</span> {report.input.width} √ó {report.input.height} px</div>
                          <div><span className="font-medium">DPI:</span> {report.input.dpi || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}</div>
                        </div>
                      </div>
                      
                      {/* Technical Info */}
                      <div className="space-y-2">
                        <h4 className="font-medium text-deep-earth">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ:</h4>
                        <div className="text-sm text-deep-earth/70 space-y-1">
                          <div><span className="font-medium">Color Space:</span> {report.input.colorSpace || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}</div>
                          <div><span className="font-medium">ICC Profile:</span> {report.input.iccProfile || '‡πÑ‡∏°‡πà‡∏°‡∏µ'}</div>
                          {report.input.exif && (
                            <>
                              <div><span className="font-medium">‡∏Å‡∏•‡πâ‡∏≠‡∏á:</span> {report.input.exif.cameraMake} {report.input.exif.cameraModel}</div>
                              <div><span className="font-medium">‡πÄ‡∏•‡∏ô‡∏™‡πå:</span> {report.input.exif.lensModel || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}</div>
                              <div><span className="font-medium">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢:</span> {report.input.exif.dateTimeOriginal || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}</div>
                            </>
                          )}
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EXIF ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î */}
                {report?.input?.exif && (
                  <div className="card bg-morning-gold/5">
                    <h3 className="text-lg font-semibold text-deep-earth mb-4">üì∏ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EXIF ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</h3>
                    
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                      {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏ô‡∏™‡πå */}
                      <div className="space-y-3">
                        <h4 className="font-medium text-deep-earth text-sm border-b border-morning-gold/30 pb-1">‡∏Å‡∏•‡πâ‡∏≠‡∏á & ‡πÄ‡∏•‡∏ô‡∏™‡πå</h4>
                        <div className="space-y-2 text-sm text-deep-earth/70">
                          {(report.input.exif.cameraMake || report.input.exif.cameraModel) && (
                            <div>
                              <span className="font-medium">‡∏Å‡∏•‡πâ‡∏≠‡∏á:</span>
                              <div className="mt-1">
                                {report.input.exif.cameraMake && report.input.exif.cameraModel 
                                  ? `${report.input.exif.cameraMake} ${report.input.exif.cameraModel}`
                                  : report.input.exif.cameraMake || report.input.exif.cameraModel
                                }
                              </div>
                            </div>
                          )}
                          
                          {(report.input.exif.lensMake || report.input.exif.lensModel) && (
                            <div>
                              <span className="font-medium">‡πÄ‡∏•‡∏ô‡∏™‡πå:</span>
                              <div className="mt-1">
                                {report.input.exif.lensMake && report.input.exif.lensModel 
                                  ? `${report.input.exif.lensMake} ${report.input.exif.lensModel}`
                                  : report.input.exif.lensMake || report.input.exif.lensModel
                                }
                              </div>
                            </div>
                          )}
                          
                          {report.input.exif.focalLength && (
                            <div>
                              <span className="font-medium">‡∏£‡∏∞‡∏¢‡∏∞‡πÇ‡∏ü‡∏Å‡∏±‡∏™:</span>
                              <div className="mt-1">
                                {report.input.exif.focalLength}mm
                                {report.input.exif.focalLengthIn35mm && (
                                  <span className="text-deep-earth/50 ml-1">
                                    ({report.input.exif.focalLengthIn35mm}mm equiv.)
                                  </span>
                                )}
                              </div>
                            </div>
                          )}
                        </div>
                      </div>

                      {/* ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á */}
                      <div className="space-y-3">
                        <h4 className="font-medium text-deep-earth text-sm border-b border-morning-gold/30 pb-1">‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤</h4>
                        <div className="space-y-2 text-sm text-deep-earth/70">
                          {report.input.exif.fNumber && (
                            <div>
                              <span className="font-medium">‡∏£‡∏π‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏á:</span>
                              <div className="mt-1">f/{report.input.exif.fNumber}</div>
                            </div>
                          )}
                          
                          {report.input.exif.exposureTime && (
                            <div>
                              <span className="font-medium">‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ä‡∏±‡∏ï‡πÄ‡∏ï‡∏≠‡∏£‡πå:</span>
                              <div className="mt-1">1/{Math.round(1/report.input.exif.exposureTime)}s</div>
                            </div>
                          )}
                          
                          {report.input.exif.iso && (
                            <div>
                              <span className="font-medium">ISO:</span>
                              <div className="mt-1">{report.input.exif.iso}</div>
                            </div>
                          )}
                          
                          {report.input.exif.whiteBalance && (
                            <div>
                              <span className="font-medium">‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÅ‡∏™‡∏á‡∏Ç‡∏≤‡∏ß:</span>
                              <div className="mt-1">
                                {report.input.exif.whiteBalance === 0 ? 'Auto' : 
                                 report.input.exif.whiteBalance === 1 ? 'Manual' : 
                                 report.input.exif.whiteBalance}
                              </div>
                            </div>
                          )}
                          
                          {report.input.exif.flash && (
                            <div>
                              <span className="font-medium">‡πÅ‡∏ü‡∏•‡∏ä:</span>
                              <div className="mt-1">
                                {report.input.exif.flash === 0 ? '‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ' : 
                                 report.input.exif.flash === 1 ? '‡πÉ‡∏ä‡πâ' : 
                                 '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö'}
                              </div>
                            </div>
                          )}
                        </div>
                      </div>

                      {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° */}
                      <div className="space-y-3">
                        <h4 className="font-medium text-deep-earth text-sm border-b border-morning-gold/30 pb-1">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</h4>
                        <div className="space-y-2 text-sm text-deep-earth/70">
                          {report.input.exif.dateTimeOriginal && (
                            <div>
                              <span className="font-medium">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢:</span>
                              <div className="mt-1">
                                {new Date(report.input.exif.dateTimeOriginal).toLocaleString('th-TH')}
                              </div>
                            </div>
                          )}
                          
                          {report.input.exif.software && (
                            <div>
                              <span className="font-medium">‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå:</span>
                              <div className="mt-1 text-xs break-all">{report.input.exif.software}</div>
                            </div>
                          )}
                          
                          {report.input.exif.artist && (
                            <div>
                              <span className="font-medium">‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô:</span>
                              <div className="mt-1">{report.input.exif.artist}</div>
                            </div>
                          )}
                          
                          {report.input.exif.copyright && (
                            <div>
                              <span className="font-medium">‡∏•‡∏¥‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå:</span>
                              <div className="mt-1 text-xs">{report.input.exif.copyright}</div>
                            </div>
                          )}
                          
                          {report.input.exif.imageDescription && (
                            <div>
                              <span className="font-medium">‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:</span>
                              <div className="mt-1 text-xs">{report.input.exif.imageDescription}</div>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>

                    {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GPS */}
                    {report.input.exif.gps && (
                      <div className="mt-4 p-3 bg-earth-green/10 rounded-lg">
                        <h4 className="font-medium text-deep-earth text-sm mb-2">üìç ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á GPS</h4>
                        <div className="text-sm text-deep-earth/70">
                          <div>
                            <span className="font-medium">‡∏û‡∏¥‡∏Å‡∏±‡∏î:</span>
                            <div className="mt-1">
                              {report.input.exif.gps.lat?.toFixed(6)}, {report.input.exif.gps.lng?.toFixed(6)}
                            </div>
                          </div>
                          {report.input.exif.gps.altitude && (
                            <div className="mt-2">
                              <span className="font-medium">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á:</span>
                              <div className="mt-1">{report.input.exif.gps.altitude}m</div>
                            </div>
                          )}
                          {report.input.exif.gps.timestamp && (
                            <div className="mt-2">
                              <span className="font-medium">‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å GPS:</span>
                              <div className="mt-1">{report.input.exif.gps.timestamp}</div>
                            </div>
                          )}
                        </div>
                      </div>
                    )}

                    {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ */}
                    {(report.input.exif.compression || report.input.exif.bitsPerSample || report.input.exif.samplesPerPixel) && (
                      <div className="mt-4 p-3 bg-mist-grey/30 rounded-lg">
                        <h4 className="font-medium text-deep-earth text-sm mb-2">‚öôÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ</h4>
                        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm text-deep-earth/70">
                          {report.input.exif.compression && (
                            <div>
                              <span className="font-medium">‡∏Å‡∏≤‡∏£‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î:</span>
                              <div className="mt-1">{report.input.exif.compression}</div>
                            </div>
                          )}
                          {report.input.exif.bitsPerSample && (
                            <div>
                              <span className="font-medium">Bits per sample:</span>
                              <div className="mt-1">{report.input.exif.bitsPerSample}</div>
                            </div>
                          )}
                          {report.input.exif.samplesPerPixel && (
                            <div>
                              <span className="font-medium">Samples per pixel:</span>
                              <div className="mt-1">{report.input.exif.samplesPerPixel}</div>
                            </div>
                          )}
                          {report.input.exif.photometricInterpretation && (
                            <div>
                              <span className="font-medium">Photometric:</span>
                              <div className="mt-1">{report.input.exif.photometricInterpretation}</div>
                            </div>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                )}

                {/* Summary */}
                <div className="card bg-white">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-semibold text-deep-earth">‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</h3>
                    <div className="text-sm text-deep-earth/60 bg-mist-grey px-3 py-1 rounded-full">
                      {designTypes.find(t => t.value === selectedDesignType)?.label}
                    </div>
                  </div>
                  
                  {/* Overall Score */}
                  <div className="text-center mb-6">
                    <div className="text-5xl font-bold text-skypath-blue mb-2">
                      {overallScore}/100
                    </div>
                    <div className="text-sm text-deep-earth/60">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°</div>
                  </div>
                  
                  <div className="grid grid-cols-3 gap-4 mb-4">
                    <div className="text-center">
                      <div className="text-2xl font-bold text-earth-green">{passedCount}</div>
                      <div className="text-sm text-deep-earth/60">‡∏ú‡πà‡∏≤‡∏ô</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-morning-gold">{warningCount}</div>
                      <div className="text-sm text-deep-earth/60">‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡πÉ‡∏à</div>
                    </div>
                    <div className="text-center">
                      <div className="text-2xl font-bold text-heart-rose">{failedCount}</div>
                      <div className="text-sm text-deep-earth/60">‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô</div>
                    </div>
                  </div>
                  
                  <div className="text-center">
                    <div className={`inline-flex items-center gap-2 px-4 py-2 rounded-lg font-semibold ${
                      failedCount === 0 && warningCount === 0 
                        ? 'text-earth-green bg-earth-green/10'
                        : failedCount > 0 
                        ? 'text-heart-rose bg-heart-rose/10'
                        : 'text-morning-gold bg-morning-gold/10'
                    }`}>
                      {failedCount === 0 && warningCount === 0 ? (
                        <>
                          <CheckCircle className="w-4 h-4" />
                          ‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î! ‚úì
                        </>
                      ) : failedCount > 0 ? (
                        <>
                          <XCircle className="w-4 h-4" />
                          ‡∏°‡∏µ {failedCount} ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
                        </>
                      ) : (
                        <>
                          <AlertTriangle className="w-4 h-4" />
                          ‡∏û‡∏ö {warningCount} ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
                        </>
                      )}
                    </div>
                  </div>
                </div>

                {/* Detailed Results by Section */}
                {report.sections && report.sections.length > 0 && (
                <div className="card">
                    <h3 className="text-lg font-semibold text-deep-earth mb-4">‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</h3>
                    <div className="space-y-6">
                      {report.sections.map((section: any, index: number) => (
                        <div key={index} className="border-b border-mist-grey pb-4 last:border-b-0">
                          <div className="flex items-center justify-between mb-3">
                            <h4 className="font-semibold text-deep-earth">{section.label}</h4>
                            <div className="flex items-center gap-2">
                              <span className="text-2xl font-bold text-skypath-blue">{section.score}</span>
                              <span className="text-sm text-deep-earth/60">/100</span>
                            </div>
                          </div>
                          <p className="text-sm text-deep-earth/70 mb-3">{section.summary}</p>
                          
                          <div className="space-y-2">
                            {section.items.map((item: any, itemIndex: number) => (
                              <div key={itemIndex} className="flex items-start gap-3 p-3 rounded-lg bg-mist-grey/30">
                                {getStatusIcon(item.pass)}
                        <div className="flex-1">
                          <div className="flex items-center gap-2 mb-1">
                                    <span className="text-sm font-medium text-deep-earth">{item.label}</span>
                                    <span className={`px-2 py-0.5 rounded text-xs font-medium ${getStatusColor(item.pass)}`}>
                                      {getStatusLabel(item.pass)}
                                    </span>
                                    {item.value && (
                                      <span className="text-xs text-deep-earth/50">
                                        ({item.value})
                            </span>
                                    )}
                          </div>
                                  {item.evidence && (
                                    <p className="text-xs text-deep-earth/60 mt-1">{item.evidence}</p>
                                  )}
                                  {item.suggestion && (
                                    <p className="text-xs text-skypath-blue mt-1">
                                      üí° {item.suggestion}
                            </p>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Suggestions */}
                {report.suggestions && (
                  <div className="card">
                    <h3 className="text-lg font-semibold text-deep-earth mb-4">‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç</h3>
                    
                    {/* Visual Fixes */}
                    {report.suggestions.visualFix && report.suggestions.visualFix.length > 0 && (
                      <div className="mb-4">
                        <h4 className="font-semibold text-deep-earth mb-2 flex items-center gap-2">
                          <span className="text-skypath-blue">üé®</span> ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏†‡∏≤‡∏û/‡∏î‡∏µ‡πÑ‡∏ã‡∏ô‡πå
                        </h4>
                        <ul className="space-y-1">
                          {report.suggestions.visualFix.map((fix: any, index: number) => (
                            <li key={index} className="text-sm text-deep-earth/70 flex items-start gap-2">
                              <span className="text-skypath-blue">‚Ä¢</span>
                              <span>{fix}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                    
                    {/* Format Fixes */}
                    {report.suggestions.formatFix && report.suggestions.formatFix.length > 0 && (
                      <div className="mb-4">
                        <h4 className="font-semibold text-deep-earth mb-2 flex items-center gap-2">
                          <span className="text-morning-gold">üìÅ</span> ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ü‡∏•‡πå
                        </h4>
                        <ul className="space-y-1">
                          {report.suggestions.formatFix.map((fix: any, index: number) => (
                            <li key={index} className="text-sm text-deep-earth/70 flex items-start gap-2">
                              <span className="text-morning-gold">‚Ä¢</span>
                              <span>{fix}</span>
                            </li>
                          ))}
                        </ul>
                      </div>
                    )}
                    
                    {/* SEO Advice */}
                    {report.suggestions.seo && (
                      <div className="mt-4 p-4 bg-skypath-blue/5 rounded-lg">
                        <h4 className="font-semibold text-deep-earth mb-3 flex items-center gap-2">
                          <span className="text-earth-green">üîç</span> ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ SEO
                        </h4>
                        <div className="space-y-2 text-sm">
                          <div>
                            <span className="font-medium text-deep-earth">‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: </span>
                            <span className="text-skypath-blue">{report.suggestions.seo.recommendedFileName}</span>
                          </div>
                          <div>
                            <span className="font-medium text-deep-earth">Alt Text: </span>
                            <span className="text-deep-earth/70">{report.suggestions.seo.altText}</span>
                          </div>
                          <div>
                            <span className="font-medium text-deep-earth">Title: </span>
                            <span className="text-deep-earth/70">{report.suggestions.seo.title}</span>
                          </div>
                          {report.suggestions.seo.urlSlugHint && (
                            <div>
                              <span className="font-medium text-deep-earth">URL Slug: </span>
                              <span className="text-deep-earth/70">{report.suggestions.seo.urlSlugHint}</span>
                            </div>
                          )}
                        </div>
                      </div>
                    )}
                  </div>
                )}

                {/* Actions */}
                <div className="flex gap-4">
                  <button
                    onClick={() => showToast('‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏°‡∏≤‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ô‡∏µ‡πâ!')}
                    className="btn-secondary flex items-center gap-2 flex-1"
                  >
                    <Download className="w-4 h-4" />
                    ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
                  </button>
                  <button
                    onClick={() => showToast('‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß!')}
                    className="btn-primary flex items-center gap-2 flex-1"
                  >
                    <FileText className="w-4 h-4" />
                    ‡∏Ç‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
                  </button>
                </div>
              </>
            )}

            {/* File Info Display */}
            {!report && uploadedFile && (
              <div className="card">
                <h3 className="text-lg font-semibold text-deep-earth mb-4">‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î</h3>
                
                {/* File Info */}
                <div className="p-3 bg-skypath-blue/10 rounded-lg mb-4">
                  <p className="text-sm text-skypath-blue font-medium">
                    ‚úì ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î: {uploadedFile.name}
                  </p>
                  <p className="text-xs text-deep-earth/60 mt-1">
                    ‡∏Ç‡∏ô‡∏≤‡∏î: {Math.round(uploadedFile.size / 1024)}KB ‚Ä¢ ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {uploadedFile.type}
                  </p>
                </div>
                
                {/* Image Preview */}
                {imagePreview && (
                  <div className="space-y-2 mb-4">
                    <h4 className="text-sm font-medium text-deep-earth">‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏†‡∏≤‡∏û:</h4>
                    <div className="border border-mist-grey rounded-lg overflow-hidden">
                      <img 
                        src={imagePreview} 
                        alt="Preview" 
                        className="w-full h-48 object-contain bg-mist-grey/20"
                      />
                    </div>
                  </div>
                )}
                
                {/* Metadata Display */}
                {imageMetadata && (
                  <div className="p-3 bg-mist-grey/30 rounded-lg">
                    <h4 className="text-sm font-medium text-deep-earth mb-3">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå:</h4>
                    <div className="space-y-3 text-sm text-deep-earth/70">
                      <div>
                        <span className="font-medium text-deep-earth">‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå:</span>
                        <div className="mt-1 text-skypath-blue break-all">{imageMetadata.name}</div>
                      </div>
                      <div>
                        <span className="font-medium text-deep-earth">‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå:</span>
                        <div className="mt-1">{Math.round(imageMetadata.size / 1024)} KB</div>
                      </div>
                      <div>
                        <span className="font-medium text-deep-earth">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó:</span>
                        <div className="mt-1">{imageMetadata.type}</div>
                      </div>
                      {imageMetadata.width && imageMetadata.height && (
                        <div>
                          <span className="font-medium text-deep-earth">‡∏Ç‡∏ô‡∏≤‡∏î‡∏†‡∏≤‡∏û:</span>
                          <div className="mt-1">{imageMetadata.width} √ó {imageMetadata.height} px</div>
                        </div>
                      )}
                      {imageMetadata.dpi && (
                        <div>
                          <span className="font-medium text-deep-earth">DPI (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì‡∏Å‡∏≤‡∏£):</span>
                          <div className="mt-1">{imageMetadata.dpi}</div>
                        </div>
                      )}
                      {imageMetadata.aspectRatio && (
                        <div>
                          <span className="font-medium text-deep-earth">‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô:</span>
                          <div className="mt-1">{imageMetadata.aspectRatio}:1</div>
                        </div>
                      )}
                      {imageMetadata.megapixels && (
                        <div>
                          <span className="font-medium text-deep-earth">‡πÄ‡∏°‡∏Å‡∏∞‡∏û‡∏¥‡∏Å‡πÄ‡∏ã‡∏•:</span>
                          <div className="mt-1">{imageMetadata.megapixels} MP</div>
                        </div>
                      )}
                      {imageMetadata.colorSpace && (
                        <div>
                          <span className="font-medium text-deep-earth">Color Space:</span>
                          <div className="mt-1">{imageMetadata.colorSpace}</div>
                        </div>
                      )}
                      <div>
                        <span className="font-medium text-deep-earth">‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:</span>
                        <div className="mt-1">{imageMetadata.lastModified}</div>
                        <div className="mt-1 text-xs text-deep-earth/50">
                          ({getTimeAgo(imageMetadata.lastModified)})
                        </div>
                      </div>
                    </div>
                  </div>
                )}

                {/* EXIF Data from API Response */}
                {report && report.input && report.input.exif && (() => {
                  const exif = report.input.exif;
                  return (
                    <div className="p-3 bg-morning-gold/10 rounded-lg mt-3">
                      <h4 className="text-sm font-medium text-deep-earth mb-3">üì∏ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• EXIF:</h4>
                      <div className="space-y-3 text-sm text-deep-earth/70">
                        {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡πâ‡∏≠‡∏á */}
                        {(exif.cameraMake || exif.cameraModel) && (
                          <div>
                            <span className="font-medium text-deep-earth">‡∏Å‡∏•‡πâ‡∏≠‡∏á:</span>
                            <div className="mt-1">
                              {exif.cameraMake && exif.cameraModel 
                                ? `${exif.cameraMake} ${exif.cameraModel}`
                                : exif.cameraMake || exif.cameraModel
                              }
                            </div>
                          </div>
                        )}
                        
                        {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏•‡∏ô‡∏™‡πå */}
                        {(exif.lensMake || exif.lensModel) && (
                          <div>
                            <span className="font-medium text-deep-earth">‡πÄ‡∏•‡∏ô‡∏™‡πå:</span>
                            <div className="mt-1">
                              {exif.lensMake && exif.lensModel 
                                ? `${exif.lensMake} ${exif.lensModel}`
                                : exif.lensMake || exif.lensModel
                              }
                            </div>
                          </div>
                        )}
                        
                        {/* ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡πâ‡∏≠‡∏á */}
                        {(exif.fNumber || exif.exposureTime || exif.iso) && (
                          <div>
                            <span className="font-medium text-deep-earth">‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤:</span>
                            <div className="mt-1 space-y-1">
                              {exif.fNumber && (
                                <div>f/{exif.fNumber}</div>
                              )}
                              {exif.exposureTime && (
                                <div>1/{Math.round(1/exif.exposureTime)}s</div>
                              )}
                              {exif.iso && (
                                <div>ISO {exif.iso}</div>
                              )}
                            </div>
                          </div>
                        )}
                        
                        {/* ‡∏£‡∏∞‡∏¢‡∏∞‡πÇ‡∏ü‡∏Å‡∏±‡∏™ */}
                        {exif.focalLength && (
                          <div>
                            <span className="font-medium text-deep-earth">‡∏£‡∏∞‡∏¢‡∏∞‡πÇ‡∏ü‡∏Å‡∏±‡∏™:</span>
                            <div className="mt-1">
                              {exif.focalLength}mm
                              {exif.focalLengthIn35mm && (
                                <span className="text-deep-earth/50 ml-1">
                                  ({exif.focalLengthIn35mm}mm equiv.)
                                </span>
                              )}
                            </div>
                          </div>
                        )}
                        
                        {/* ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û */}
                        {exif.dateTimeOriginal && (
                          <div>
                            <span className="font-medium text-deep-earth">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡πà‡∏≤‡∏¢:</span>
                            <div className="mt-1">
                              {new Date(exif.dateTimeOriginal).toLocaleString('th-TH')}
                            </div>
                          </div>
                        )}
                        
                        {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• GPS */}
                        {exif.gps && (
                          <div>
                            <span className="font-medium text-deep-earth">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á GPS:</span>
                            <div className="mt-1">
                              <div>üìç {exif.gps.lat?.toFixed(6)}, {exif.gps.lng?.toFixed(6)}</div>
                              {exif.gps.altitude && (
                                <div className="text-xs text-deep-earth/50">
                                  ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á: {exif.gps.altitude}m
                                </div>
                              )}
                            </div>
                          </div>
                        )}
                        
                        {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå */}
                        {exif.software && (
                          <div>
                            <span className="font-medium text-deep-earth">‡∏ã‡∏≠‡∏ü‡∏ï‡πå‡πÅ‡∏ß‡∏£‡πå:</span>
                            <div className="mt-1 text-xs break-all">{exif.software}</div>
                          </div>
                        )}
                        
                        {/* ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏®‡∏¥‡∏•‡∏õ‡∏¥‡∏ô/‡∏•‡∏¥‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå */}
                        {(exif.artist || exif.copyright) && (
                          <div>
                            <span className="font-medium text-deep-earth">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°:</span>
                            <div className="mt-1 space-y-1">
                              {exif.artist && (
                                <div>üë§ {exif.artist}</div>
                              )}
                              {exif.copyright && (
                                <div>¬© {exif.copyright}</div>
                              )}
                            </div>
                          </div>
                        )}
                      </div>
                    </div>
                  );
                })()}
                
                <div className="mt-4 p-3 bg-morning-gold/10 rounded-lg">
                  <p className="text-sm text-deep-earth/70 text-center">
                    ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: <span className="font-medium text-skypath-blue">
                      {designTypes.find(t => t.value === selectedDesignType)?.label}
                    </span>
                  </p>
                  <p className="text-xs text-deep-earth/60 text-center mt-1">
                    ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏° "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö" ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
                  </p>
                </div>
              </div>
            )}
            
            {/* Empty State - Only when no file uploaded */}
            {!report && !uploadedFile && (
              <div className="card text-center py-12">
                <CheckCircle className="w-16 h-16 text-deep-earth/20 mx-auto mb-4" />
                <h3 className="text-lg font-semibold text-deep-earth mb-2">‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö</h3>
                <p className="text-deep-earth/70 mb-2">
                  ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö brand compliance
                </p>
                <p className="text-sm text-deep-earth/60">
                  ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: <span className="font-medium text-skypath-blue">
                    {designTypes.find(t => t.value === selectedDesignType)?.label}
                  </span>
                </p>
              </div>
            )}
          </div>
        </div>

        {/* Guidelines Reference */}
        <div className="mt-12 card bg-white">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-xl font-semibold text-deep-earth">What We Check</h3>
            <div className="text-sm text-deep-earth/60 bg-skypath-blue/10 text-skypath-blue px-3 py-1 rounded-full">
              ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {designTypes.find(t => t.value === selectedDesignType)?.label}
            </div>
          </div>
          <p className="text-base text-deep-earth/60 mb-6">
            üîç ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏≤‡πÄ‡∏ä‡πá‡∏Ñ‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏π‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡∏ö‡πâ‡∏≤‡∏ô
          </p>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {complianceChecks.map((category: any, index: number) => (
              <div key={index} className="space-y-3">
                <h4 className="font-semibold text-deep-earth">{category.category}</h4>
                <p className="text-xs text-deep-earth/50 mb-2">
                  {category.category === 'Logo Usage' && 'üè∑Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡πÉ‡∏ä‡πâ‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà'}
                  {category.category === 'Colors' && 'üé® ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà'}
                  {category.category === 'Typography' && 'üìù ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà'}
                  {category.category === 'Voice & Tone' && 'üí¨ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà'}
                  {category.category === 'Accessibility' && '‚ôø ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏ô‡∏û‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà'}
                  {category.category === 'File Quality' && 'üìÅ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÑ‡∏ü‡∏•‡πå‡∏î‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà'}
                </p>
                <ul className="space-y-1 text-sm text-deep-earth/70">
                  {category.checks.map((check: any, checkIndex: number) => (
                    <li key={checkIndex} className="flex items-start gap-2">
                      <span className="text-earth-green">‚Ä¢</span>
                      <div>
                        <div>{check.rule}</div>
                        <div className="text-xs text-deep-earth/50 mt-1">{check.ruleThai}</div>
                      </div>
                    </li>
                  ))}
                </ul>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  )
}
